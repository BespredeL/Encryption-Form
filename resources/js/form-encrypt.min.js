/**
 * Form Encrypt
 *
 * @author Aleksandr Kireev <hello@bespredel.name>
 * @website https://bespredel.name
 * @license MIT
 */
!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=e():"function"==typeof define&&define.amd?define([],e):t.FormEncryptor=e()}("undefined"!=typeof window?window:this,(function(){return class{constructor(t){if(!t)throw new Error("Public key is required for encryption.");if(this.publicKey=t,"function"!=typeof JSEncrypt)return console.error("JSEncrypt library is not available. Please ensure the library is loaded and try again."),void(this.encryptor=null);this.encryptor=new JSEncrypt,this.encryptor.setPublicKey(this.publicKey)}isEncryptionAvailable(){const t="test",e=this.encryptor.encrypt(t);return!1!==e&&e===t}encryptValue(t){if(!this.encryptor)throw new Error("Encryption functionality is disabled.");if("string"!=typeof t||""===t.trim())throw new Error("Invalid input value. Value must be a non-empty string.");const e=this.encryptor.encrypt(t);if(!e)throw new Error("Failed to encrypt field value.");return e}updateStatus(t,e=!1){const n=document.querySelector(".encrypt-form-status");n&&(n.textContent=window.ENCRYPTION_FORM.trans(t),n.style.color||(n.style.color=e?"red":"green"))}askUserForAction(t){const e=document.createElement("div");e.className="form-encrypt-modal";const n=document.createElement("div");n.className="form-encrypt-modal-content";const o=document.createElement("p");o.textContent=window.ENCRYPTION_FORM.trans("Encryption is not available. Do you want to submit the form without data encryption?"),n.appendChild(o);const r=document.createElement("div");r.className="form-encrypt-modal-buttons";const i=document.createElement("button");i.textContent=window.ENCRYPTION_FORM.trans("Submit"),i.className="form-encrypt-modal-confirm",i.onclick=()=>{document.body.removeChild(e),t.submit()};const a=document.createElement("button");a.textContent=window.ENCRYPTION_FORM.trans("Cancel"),a.className="form-encrypt-modal-cancel",a.onclick=()=>{document.body.removeChild(e),this.updateStatus("Form submission canceled by user.",!0)},r.appendChild(i),r.appendChild(a),n.appendChild(r),e.appendChild(n),document.body.appendChild(e)}encryptForm(t){const e=t.querySelectorAll('[data-encrypt="true"]'),n=e.length>0?e:t.querySelectorAll("input, textarea");try{n.forEach((e=>{if("false"===e.getAttribute("data-encrypt"))return void console.warn(`Skipping field: ${e.name}, encryption is disabled.`);const{value:n,type:o,name:r}=e;if(!n||"_token"===r||"file"===o||"checkbox"===o||"radio"===o)return void console.warn(`Encryption skipped for unsupported input: ${r}`);const i=this.encryptValue(n);if("text"!==o&&"password"!==o&&"textarea"!==o&&"email"!==o){const n=document.createElement("input");n.type="hidden",n.name=r,n.value=`${window.ENCRYPTION_FORM.prefix}${i}`,t.appendChild(n),e.name="",e.value=""}else e.value=`${window.ENCRYPTION_FORM.prefix}${i}`})),this.updateStatus("Form encrypted successfully.")}catch(t){this.updateStatus("Failed to encrypt form.",!0),console.error("Error during form encryption:",t)}}attachToForms(){document.querySelectorAll("[data-encrypt-form]").forEach((t=>{if("get"===t.method.toLowerCase())return void console.warn(`Skipping form with method "${t.method}": ${t.name||"unnamed form"}`);this.isEncryptionAvailable()?this.updateStatus("Encryption available.",!1):this.updateStatus("Encryption not available.",!0);let e=null;t.addEventListener("submit",(n=>{n.preventDefault(),e&&clearTimeout(e),e=setTimeout((()=>{try{this.isEncryptionAvailable()?(this.encryptForm(t),t.submit()):(console.warn("Encryption is not available. Asking user for action."),this.updateStatus("Encryption not available.",!0),this.askUserForAction(t))}catch(e){console.error("Form encryption failed:",e),this.askUserForAction(t)}}),300)}))}))}}})),document.addEventListener("DOMContentLoaded",(()=>{try{if(!window.ENCRYPTION_FORM.public_key)return void console.error("ENCRYPTION_FORM_PUBLIC_KEY is not set!");new FormEncryptor(window.ENCRYPTION_FORM.public_key).attachToForms()}catch(t){console.error("Failed to initialize FormEncryptor:",t)}}));